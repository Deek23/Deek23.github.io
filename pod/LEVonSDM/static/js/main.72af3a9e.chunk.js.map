{"version":3,"sources":["slider-height.js","slider-planting.js","slider-sapling_price.js","slider-revenue.js","slider-management_cost.js","slider-MAI.js","selector-sp.js","selector-id.js","selector-DR.js","selector-PY.js","card-sdm.js","sdm-core.js","sdm-diagram.js","card-lev.js","optimal-planting.js","card-lev_time_course.js","App.js","reportWebVitals.js","lev-core.js","reducer-LEVonSDM.js","index.js"],"names":["WideTooltip","styled","className","props","Tooltip","classes","popper","tooltipClasses","tooltip","maxWidth","SliderHeight","dispatch","useDispatch","height","useSelector","state","setHeight","newHeight","type","payload","Typography","id","title","placement","arrow","Grid","container","spacing","alignItems","sx","mb","xs","item","Slider","value","onChange","event","inputHeight","getAriaValueText","v","min","max","valueLabelDisplay","marks","label","Input","backgroundColor","ml","minWidth","endAdornment","InputAdornment","position","margin","target","NaN","Number","onBlur","inputProps","step","SliderPlanting","planting","setPlanting","newPlanting","gutterBottom","mt","inputPlanting","SliderPriceSapling","priceSapling","setPriceSapling","newPriceSapling","width","SliderRevenue","revenue","setRevenue","newRevenue","useState","balance","setBalance","newBalance","Math","abs","SliderCostManagement","costManagement","setCostManagement","newCostManagement","SliderMAI","mai","setMAI","newMAI","SelectorSp","sp","FormControl","padding","InputLabel","Select","labelId","newSp","MenuItem","SelectorID","selectedParameters","require","filter","d","spID","newID","map","ID","area","SelectorDR","discountingRate","setDiscountingRate","newDR","Box","mx","htmlFor","OutlinedInput","SelectorPY","processYield","setProcessYield","newPY","CalcSDMSummary","sdm","outMaxD","densityHMaxD","outMaxV","volumeMaxD2","outDV","PH2DV2","outRy","volume","Card","heigh","boxShadow","CardHeader","p","CardContent","m","l","component","textAlign","size","round","density","color","parameters","SDMDiagram","setParms","inputID","a","localID","lp","lk1","b4","b2","setK2l","k1","Rf","b3","b1","setK5l","k2","k5","this","setK5","volumeI","volumeA","dMax","density2","resultD","brentsMethod","x","volumeHD2","errorTolerance","maxIterations","resultV","altDensity","altVolume","maximumDensity","minimize","tolerance","lowerBound","upperBound","DrawSDMDiagram","plantingInput","dv","xTop","xBottom","Array","fill","_","i","ry","localDC","yTop","ceil","bottomTmp","yBottom","floor","densityScale","scaleLog","domain","clamp","volumeScale","nThinning","flatMap","y","evenHeight","h","concat","MaxD","vol","labelEvenHeight","length","dvMaxD","outDensity","ryTarget","r","den","densityHV2","labelRy","legendScale","scaleOrdinal","range","top","right","bottom","left","xMax","yMax","rx","Group","GridRows","scale","stroke","GridColumns","x1","x2","y1","y2","AxisBottom","tickValues","tickFormat","labelProps","fontSize","textAnchor","AxisLeft","numTicks","data","index","LinePath","curve","curveBasis","strokeWidth","strokeOpacity","curveCardinal","Text","verticalAnchor","curveNatural","strokeDasharray","horizontalAnchor","GlyphStar","variant","align","lineHeight","mr","direction","itemDirection","shape","labelMargin","CalcLEVSummary","lev","optP","optV","costMgmt","thresholdYear","threshold","thresholdMAI","isNaN","revenueForestry","fc","npvOutput","npv","levOutput","irrOutput","irr","OptimalPlanting","balanceData","cost","optPlantingData","back","revenueMax","plantingScale","scaleLinear","balanceScale","Annotation","dx","dy","Connector","Label","backgroundFill","showAnchorLine","anchorLineStroke","backgroundProps","fontColor","titleFontSize","titleFontWeight","titleProps","subtitle","subtitleFontSize","subtitleDy","subtitleProps","Maxwidth","LineSubject","orientation","ChartLEV","optVol","dataLEV","levTimeCourse","maxLEV","reduce","b","yearLevMax","indexOf","yearOpt","levOpt","dataLevChart","year","dataLevMax","dataOpt","yearScale","levScale","curveLinear","CircleSubject","radius","backgroundPadding","drawerWidth","App","window","React","mobileOpen","setMobileOpen","handleDrawerToggle","ExpandMore","expand","other","IconButton","theme","transform","marginLeft","transition","transitions","create","duration","shortest","expanded1","setExpanded1","expanded2","setExpanded2","expanded3","setExpanded3","expanded4","setExpanded4","localSDM","localDV","localHeight","localPlanting","localOptP","optPlanting","localOptV","optVolume","localLEV","localPriceS","localCostM","localMAI","drawer","Toolbar","Divider","px","List","ListItem","undefined","document","body","display","CssBaseline","AppBar","sm","edge","onClick","noWrap","flexShrink","Drawer","open","onClose","ModalProps","keepMounted","boxSizing","elevation","zIndex","CardActions","disableSpacing","fontWeight","Collapse","in","timeout","unmountOnExit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LEV","rPN","cM","cS","pY","dR","revenueProductionNet","costSapling","resultY","log","out","c","initialState","stageTwo","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.72af3a9e.chunk.js","sourcesContent":["\nimport React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\n// Material-UI selector （var 5）\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport Input from '@mui/material/Input';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n    <Tooltip {...props} classes={{ popper: className }} />\n  ))({\n    [`& .${tooltipClasses.tooltip}`]: {\n      maxWidth: 300,\n    },\n  });\n\n// コンポーネント本体\nfunction SliderHeight() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const height = useSelector(state => state.height);\n  const setHeight = (newHeight) =>{\n    dispatch({type: 'SET_HEIGHT', payload: newHeight});\n  }\n\n  // 目標樹高調整ハンドラ\n  const textHeightSlider = `\n    目標とする樹高を設定\n    `;\n  const handleHeightSlider = (event, inputHeight) => {\n    setHeight(inputHeight)\n  };\n  const handleHeightInput = (event) => {\n    setHeight(event.target.value === '' ? NaN : Number(event.target.value));\n  };\n  const handleHeightBlur = () => {\n    if (height < 10) {\n      setHeight(10);\n    } else if (height > 60) {\n      setHeight(60);\n    }\n  };\n  const hMarks = [\n    { value: 10, label: '10m', },\n    { value: 20, label: '20m', },\n    { value: 50, label: '50m', },\n  ];\n\n  // 出力\n  return (\n    <>\n      {/*樹高スライダー*/}\n      <Typography id=\"height-input-tile\">\n        樹高\n      </Typography>\n      <WideTooltip title={textHeightSlider} placement=\"bottom\" arrow>\n        <Grid container id=\"height-inputs\" spacing={4} alignItems=\"center\"\n          sx={{\n            mb: { xs: 3 },\n          }}\n        >\n          <Grid item id=\"height-slider\" xs>\n            <Slider\n              value={typeof height === 'number' ? height : 10}\n              onChange={handleHeightSlider}\n              getAriaValueText={(v) => { return ('{$v}m') }}\n              aria-labelledby=\"height-inputs\"\n              min={10}\n              max={50}\n              valueLabelDisplay=\"auto\"\n              marks={hMarks}\n            />\n          </Grid>\n          <Grid item id=\"height-number\" >\n            <Input\n              sx={{\n                backgroundColor: \"#ffffff\",\n                ml: { xs: 2 },\n                minWidth: 81,\n              }}\n              value={height}\n              endAdornment={<InputAdornment position=\"end\">m</InputAdornment>}\n              margin=\"dense\"\n              onChange={handleHeightInput}\n              onBlur={handleHeightBlur}\n              inputProps={{\n                step: 1,\n                min: 10,\n                max: 50,\n                type: 'number',\n                'aria-labelledby': 'height-inputs',\n              }}\n            />\n          </Grid>\n        </Grid>\n      </WideTooltip>\n    </>\n  );\n}\n\nexport default SliderHeight;\n","\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Material-UI selector （var 5）\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport Input from '@mui/material/Input';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 300,\n  },\n});\n\n// コンポーネント本体\nfunction SliderPlanting() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const planting = useSelector(state => state.planting);\n  const setPlanting = (newPlanting) => {\n    dispatch({ type: 'SET_PLANTING', payload: newPlanting });\n  }\n\n  // 目標樹高調整ハンドラ\n  // 植栽本数調整\n  const textPlantingSlider = `\n    植栽本数を設定。間伐による個体数調整もこの値を変化させることで擬似的に可能です。\n    `;\n  const handlePlantingSlider = (event, inputPlanting) => {\n    setPlanting(inputPlanting);\n  };\n  const handlePlantingInput = (event) => {\n    setPlanting(event.target.value === '' ? NaN : Number(event.target.value));\n  };\n  const handlePlantingBlur = () => {\n    if (planting < 100) {\n      setPlanting(100);\n    } else if (planting > 5000) {\n      setPlanting(5000);\n    }\n  };\n  const dMarks = [\n    { value: 500, label: '500本', },\n    { value: 1000, },\n    { value: 1500, },\n    { value: 2000, },\n    { value: 2500, },\n    { value: 3000, },\n    { value: 3500, },\n    { value: 4000, },\n    { value: 4500, },\n    { value: 5000, label: '5000本', },\n  ];\n\n  // 出力\n  return (\n    <>\n      {/*苗木本数スライダー*/}\n      <Typography id=\"planting-input-title\" gutterBottom\n        sx={{\n          mt: { xs: 2 },\n          ml: { xs: 1 },\n        }}\n      >\n        植栽本数\n      </Typography>\n      <WideTooltip title={textPlantingSlider} placement=\"bottom\" arrow>\n        <Grid container id=\"planting-inputs\" spacing={4} alignItems=\"center\"\n          sx={{\n            mb: { xs: 3 },\n          }}\n        >\n          <Grid item id=\"planting-slider\" xs>\n            <Slider\n              value={typeof planting === 'number' ? planting : 2500}\n              onChange={handlePlantingSlider}\n              getAriaValueText={(v) => { return ('{$v}本') }}\n              aria-labelledby=\"planting-inputs\"\n              step={500}\n              //marks\n              marks={dMarks}\n              min={500}\n              max={5000}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n          <Grid item id=\"planting-number\" xs={3}>\n            <Input\n              sx={{\n                backgroundColor: \"#ffffff\",\n                ml: { xs: 2 },\n                minWidth: 81,\n              }}\n              value={planting}\n              endAdornment={<InputAdornment position=\"end\">本</InputAdornment>}\n              margin=\"dense\"\n              onChange={handlePlantingInput}\n              onBlur={handlePlantingBlur}\n              inputProps={{\n                step: 100,\n                min: 100,\n                max: 5000,\n                type: 'number',\n                'aria-labelledby': 'planting-inputs',\n              }}\n            />\n          </Grid>\n        </Grid>\n      </WideTooltip>\n    </>\n  );\n}\n\nexport default SliderPlanting;\n","\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Material-UI selector （var 5）\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport Input from '@mui/material/Input';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 300,\n  },\n});\n\n// コンポーネント本体\nfunction SliderPriceSapling() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const priceSapling = useSelector(state => state.priceSapling);\n  const setPriceSapling = (newPriceSapling) => {\n    dispatch({ type: 'SET_SAPLING_PRISE', payload: newPriceSapling });\n  }\n\n  // 苗木価格調整\n  const textPsSlider = `\n    苗木コストを設定。苗木単価に加えて、基肥・単木保護資材コストなどを考慮しても良いかも知れません。スライダーは50～200円の範囲ですが、入力窓は最高3000円まで設定できます。\n    `;\n  const handlePriceSaplingSlider = (event, newPriceSapling) => {\n    setPriceSapling(newPriceSapling);\n  };\n  const handlePriceSaplingInput = (event) => {\n    setPriceSapling(event.target.value === '' ? NaN : Number(event.target.value));\n  };\n  const handlePriceSaplingBlur = () => {\n    if (priceSapling < 50) {\n      setPriceSapling(50);\n    } else if (priceSapling > 3000) {\n      setPriceSapling(3000);\n    }\n  };\n  const csMarks = [\n    { value: 50, label: '50', },\n    { value: 100, label: '100', },\n    { value: 150, label: '150', },\n    { value: 200, label: '200円', },\n  ];\n\n  // 出力\n  return (\n    <>\n      {/*苗木コストスライダ*/}\n      <Typography id=\"price-input-title\">\n        苗木価格\n      </Typography>\n      <WideTooltip title={textPsSlider} placement=\"top-start\" arrow>\n        <Grid container id=\"price-inputs\" spacing={4} alignItems=\"center\"\n          sx={{\n            mb: { xs: 3 },\n          }}\n        >\n          <Grid item id=\"price-slider\" xs>\n            <Slider\n              value={typeof priceSapling === 'number' ? priceSapling : 100}\n              onChange={handlePriceSaplingSlider}\n              getAriaValueText={(v) => { return ('{$v}円') }}\n              aria-labelledby=\"priceSapling-slider\"\n              step={10}\n              marks={csMarks}\n              min={50}\n              max={200}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n          <Grid item id=\"price-number\" >\n            <Input\n              sx={{\n                backgroundColor: \"#ffffff\",\n                ml: { xs: 1 },\n                width: 120,\n              }}\n              endAdornment={<InputAdornment position=\"end\"><span>円･本<sup>-1</sup></span></InputAdornment>}\n              value={priceSapling}\n              margin=\"dense\"\n              onChange={handlePriceSaplingInput}\n              onBlur={handlePriceSaplingBlur}\n              inputProps={{\n                step: 10,\n                min: 50,\n                max: 3000,\n                type: 'number',\n                'aria-labelledby': 'priceSapling-slider',\n              }}\n            />\n          </Grid>\n        </Grid>\n      </WideTooltip>\n    </>\n  );\n}\n\nexport default SliderPriceSapling;\n","\nimport React , {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\n// Material-UI selector （var 5）\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport Input from '@mui/material/Input';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n    <Tooltip {...props} classes={{ popper: className }} />\n  ))({\n    [`& .${tooltipClasses.tooltip}`]: {\n      maxWidth: 300,\n    },\n  });\n\n// コンポーネント本体\nfunction SliderRevenue() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const revenue = useSelector(state => state.revenue);\n  const setRevenue = (newRevenue) =>{\n    dispatch({type: 'SET_REVENUE', payload: newRevenue});\n  }\n  const [balance, setBalance] = useState([6000,10000]);  // ローカルで利用する収支\n\n  // 材収益調整\n  const textRevenueSlider = `\n    伐出純益を設定。スライダーの右端で売り上げ額を、左端で伐出経費額を設定できます。\n    `;\n  const handleRevenueSlider = (event, newBalance) => {\n    setBalance(newBalance);  // ローカルでバランスを利用\n    const newRevenue = Math.abs(newBalance[0] - newBalance[1])\n    setRevenue(newRevenue);\n  };\n  const handleRevenueInput = (event) => {\n    setRevenue(event.target.value === '' ? NaN : Number(event.target.value));\n    const newBalance = [balance[1] - Number(event.target.value), balance[1]];\n    setBalance(newBalance);\n  };\n  const handleRevenueBlur = () => {\n    if (revenue < 3000) {\n      setRevenue(3000);\n    } else if (revenue > 12000) {\n      setRevenue(12000);\n    }\n  };\n  const rMarks = [\n    { value:    0, label: '0', },\n    { value:  500, label: '', },\n    { value: 1000, label: '1,000', },\n    { value: 2000, label: '', },\n    { value: 3000, label: '', },\n    { value: 4000, label: '', },\n    { value: 5000, label: '5,000', },\n    { value: 6000, label: '', },\n    { value: 7000, label: '', },\n    { value: 8000, label: '', },\n    { value: 9000, label: '', },\n    { value: 10000, label: '10,000円', },\n    { value: 11000, label: '', },\n    { value: 12000, label: '', },\n  ];\n\n  // 出力\n  return (\n    <>\n                {/*伐出純益スライダ*/}\n                <Typography id=\"revenue-input-title\">\n                  伐出純益\n                </Typography>\n                <WideTooltip title={textRevenueSlider} placement=\"top-start\" arrow>\n                  <Grid container id=\"revenue-inputs\" spacing={4} alignItems=\"center\"\n                    sx={{\n                      mb: { xs: 3 },\n                    }}\n                  >\n                    <Grid item id=\"revenue-slider\" xs>\n                      <Slider\n                        // value={typeof balance === 'number' ? balance : [1000,5000]}\n                        value={balance}\n                        onChange={handleRevenueSlider}\n                        getAriaValueText={(v) => { return ('{$v}円') }}\n                        aria-labelledby=\"revenue-slider\"\n                        step={500}\n                        marks={rMarks}\n                        min={0}\n                        max={12000}\n                        valueLabelDisplay=\"auto\"\n                      />\n                    </Grid>\n                    <Grid item id=\"revenue-number\" >\n                      <Input\n                        sx={{\n                          backgroundColor: \"#ffffff\",\n                          ml: { xs: 1 },\n                          width: 120, \n                        }}\n                        value={revenue}\n                        endAdornment={<InputAdornment position=\"end\"><span>円･m<sup>-3</sup></span></InputAdornment>}\n                        margin=\"dense\"\n                        onChange={handleRevenueInput}\n                        onBlur={handleRevenueBlur}\n                        inputProps={{\n                          step: 100,\n                          min: 3000,\n                          max: 12000,\n                          type: 'number',\n                          'aria-labelledby': 'planting-slider',\n                        }}\n                      />\n                    </Grid>\n                  </Grid>\n                </WideTooltip>    </>\n  );\n}\n\nexport default SliderRevenue;\n","import React, {useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Material-UI selector （var 5）\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport Input from '@mui/material/Input';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 300,\n  },\n});\n\n// コンポーネント本体\nfunction SliderCostManagement() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const costManagement = useSelector(state => state.costManagement);\n  const setCostManagement = (newCostManagement) => {\n    dispatch({ type: 'SET_MANAGEMENT_COST', payload: newCostManagement });\n  }\n  const [balance, setBalance] = useState([100,300]);  // ローカルで利用する収支\n\n\n  // 育林経費調整\n  const textCmSlider = `\n    造林・育林経費のうち、植栽本数に依存しないコストを設定。スライダーの右端で実経費額を、左端で補助金額を設定できます。\n    `;\n  const handleCostManagementSlider = (event, newBalance) => {\n    setBalance(newBalance);  // ローカルでバランスを利用\n    const newCostManagement = Math.abs(newBalance[0] - newBalance[1])\n    setCostManagement(newCostManagement);\n  };\n  const handleCostManagementInput = (event) => {\n    setCostManagement(event.target.value === '' ? NaN : Number(event.target.value));\n    const newBalance = [balance[1] - Number(event.target.value), balance[1]];\n    setBalance(newBalance);\n  };\n  const handleCostManagementBlur = () => {\n    if (costManagement < 0) {\n      setCostManagement(0);\n    } else if (costManagement > 300) {\n      setCostManagement(300);\n    }\n  };\n  const cmMarks = [\n    { value: 0, label: '0', },\n    { value: 50, label: '50', },\n    { value: 100, label: '100', },\n    { value: 150, label: '', },\n    { value: 200, label: '200', },\n    { value: 250, label: '', },\n    { value: 300, label: '300', },\n    { value: 350, label: '', },\n    { value: 400, label: '400万円', },\n  ];\n\n  // 出力\n  return (\n    <>\n      {/*造・育林コストスライダ*/}\n      <Typography id=\"prise-input-title\">\n        育林コスト\n      </Typography>\n      <WideTooltip title={textCmSlider} placement=\"top-start\" arrow>\n        <Grid container id=\"costManagement-inputs\" spacing={4} alignItems=\"center\"\n          sx={{\n            mb: { xs: 3 },\n          }}\n        >\n          <Grid item id=\"costManagement-slider\" xs>\n            <Slider\n              // value={typeof costManagement === 'number' ? costManagement : 200}\n              value={balance}\n              onChange={handleCostManagementSlider}\n              getAriaValueText={(v) => { return ('{$v}万円') }}\n              aria-labelledby=\"priceSapling-slider\"\n              step={10}\n              marks={cmMarks}\n              min={0}\n              max={400}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n          <Grid item id=\"costManagement-number\" >\n            <Input\n              sx={{\n                backgroundColor: \"#ffffff\",\n                ml: { xs: 1 },\n                width: 120,\n              }}\n              value={costManagement}\n              endAdornment={<InputAdornment position=\"end\"><span>万円･ha<sup>-1</sup></span></InputAdornment>}\n              margin=\"dense\"\n              onChange={handleCostManagementInput}\n              onBlur={handleCostManagementBlur}\n              inputProps={{\n                step: 10,\n                min: 0,\n                max: 300,\n                type: 'number',\n                'aria-labelledby': 'costManagement-slider',\n              }}\n            />\n          </Grid>\n        </Grid>\n      </WideTooltip>\n    </>\n  );\n}\n\nexport default SliderCostManagement;\n","\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Material-UI selector （var 5）\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Slider from '@mui/material/Slider';\nimport Input from '@mui/material/Input';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 300,\n  },\n});\n\n// コンポーネント本体\nfunction SliderMAI() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const mai = useSelector(state => state.mai);\n  const setMAI = (newMAI) => {\n    dispatch({ type: 'SET_MAI', payload: newMAI });\n  }\n\n  // 平均成長量調整\n  const textMAISlider = `\n    LEVによる収益判断のための平均年成長量を設定。この値が算出されるMAI閾値を上回る場合、LEVがプラスとなる伐期が結果欄に表示されます。\n    `;\n  const handleMAISlider = (event, newMAI) => {\n    setMAI(newMAI);\n  };\n  const handleMAIInput = (event) => {\n    setMAI(event.target.value === '' ? NaN : Number(event.target.value));\n  };\n  const handleMAIBlur = () => {\n    if (mai < 5.0) {\n      setMAI(5.0);\n    } else if (mai > 25.0) {\n      setMAI(25.0);\n    }\n  };\n  const maiMarks = [\n    { value: 5, label: '5', },\n    { value: 10, label: '10', },\n    { value: 15, label: '', },\n    { value: 20, label: '20m3/ha/年', },\n    { value: 25, label: '', },\n  ];\n\n  // 出力\n  return (\n    <>\n      {/*MAIスライダ*/}\n      <Typography id=\"prise-input-title\">\n        年平均成長量（MAI）\n      </Typography>\n      <WideTooltip title={textMAISlider} placement=\"top-start\" arrow>\n        <Grid container id=\"MAI-inputs\" spacing={4} alignItems=\"center\"\n          sx={{\n            mb: { xs: 3 },\n          }}\n        >\n          <Grid item id=\"MAI-slider\" xs>\n            <Slider\n              value={typeof mai === 'number' ? mai : 10}\n              onChange={handleMAISlider}\n              getAriaValueText={(v) => { return ('{$v}m3/ha/y') }}\n              aria-labelledby=\"priceSapling-slider\"\n              step={1}\n              marks={maiMarks}\n              min={5}\n              max={25}\n              valueLabelDisplay=\"auto\"\n            />\n          </Grid>\n          <Grid item id=\"MAI-number\" >\n            <Input\n              sx={{\n                backgroundColor: \"#ffffff\",\n                ml: { xs: 1 },\n                width: 120,\n              }}\n              value={mai}\n              endAdornment={<InputAdornment position=\"end\"><span>m<sup>3</sup>ha<sup>-1</sup>年<sup>-1</sup></span></InputAdornment>}\n              margin=\"dense\"\n              onChange={handleMAIInput}\n              onBlur={handleMAIBlur}\n              inputProps={{\n                step: 1,\n                min: 5,\n                max: 25,\n                type: 'number',\n                'aria-labelledby': 'costMgmt-slider',\n              }}\n            />\n          </Grid>\n        </Grid>\n      </WideTooltip>\n\n    </>\n  );\n}\n\nexport default SliderMAI;\n","//\n// stage-2 用の 樹種セレクタコンポーネント\n// sp は id に内包されるため、直接的な機能は無いが、\n// id 選択の場合分けに必要\n//\n\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Material-UI selector （var 5）\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 300,\n  },\n});\n\n// コンポーネント本体\nfunction SelectorSp() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const sp = useSelector(state => state.sp);\n  const setSp = (newSp) => {\n    dispatch({ type: 'SET_SP', payload: newSp });\n  }\n\n  //樹種変更\n  const textChangeSP = `\n    密度管理図の対象とする樹種を選択\n    `;\n  const handleChangeSp = (event) => {\n    setSp(event.target.value);\n  };\n\n\n  // 出力\n  return (\n    <>\n      {/*樹種選択*/}\n      <WideTooltip title={textChangeSP} placement=\"right-end\" arrow>\n        <FormControl\n          sx={{\n            margin: { xs: 1 },\n            minWidth: 120,\n            padding: { xs: 1 },\n          }}\n        >\n          <InputLabel id=\"sp-select-label\">樹種</InputLabel>\n          <Select\n            sx={{\n              backgroundColor: \"#ffffff\",\n            }}\n            labelId=\"sp-select-label\"\n            id=\"sp-select\"\n            value={sp}\n            onChange={handleChangeSp}\n          >\n            <MenuItem value={0}>スギ</MenuItem>\n            <MenuItem value={1}>ヒノキ</MenuItem>\n            <MenuItem value={2}>カラマツ</MenuItem>\n            <MenuItem value={3}>アカマツ</MenuItem>\n            <MenuItem value={4}>針葉樹</MenuItem>\n            <MenuItem value={5}>広葉樹</MenuItem>\n          </Select>\n        </FormControl>\n      </WideTooltip>\n    </>\n  );\n}\n\nexport default SelectorSp;\n","//\n// stage-2 用の パラメータIDセレクタコンポーネント\n// このコンポーネントは sp 選択枝が sp で場合分けされる。\n//\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Material-UI selector （var 5）\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 300,\n  },\n});\n\n// コンポーネント本体\nfunction SelectorID() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const id = useSelector(state => state.id);\n  const setID = (newID) => {\n    dispatch({ type: 'SET_ID', payload: newID });\n    dispatch({ type: 'SET_DV'});\n  }\n  const sp = useSelector(state => state.sp);\n\n  // エリア変更\n  const textChangeArea = `\n    密度管理図の対象とする地域を選択\n    `;\n  const handleChangeID = (event) => {\n    setID(event.target.value);\n  };\n\n  // 西園ら (2013) に基づく密度管理図パラメータリスト\n  const parameters = require('./parameters.json');\n  const selectedParameters = parameters.filter(d => d.spID == sp);\n\n  // 出力\n  return (\n    <>\n      {/*エリア選択*/}\n      <WideTooltip title={textChangeArea} placement=\"right-end\" arrow>\n        <FormControl\n          sx={{\n            margin: { xs: 1 },\n            minWidth: 120,\n            padding: { xs: 1 },\n          }}\n        >\n          <InputLabel id=\"area-select-label\">エリア</InputLabel>\n          <Select\n            sx={{\n              backgroundColor: \"#ffffff\",\n            }}\n            labelId=\"area-select-label\"\n            id=\"area-select\"\n            value={id}\n            onChange={handleChangeID}\n          >\n            {selectedParameters.map(v => { return (<MenuItem value={v.ID}>{v.area}</MenuItem>) })}\n          </Select>                </FormControl>\n      </WideTooltip>\n    </>\n  );\n}\n\nexport default SelectorID;","//\n// stage-2 用の 割引率（実質金利）セレクタコンポーネント\n//\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Material-UI selector （var 5）\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 300,\n  },\n});\n\n// コンポーネント本体\nfunction SelectorDR() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const discountingRate = useSelector(state => state.discountingRate);\n  const setDiscountingRate = (newDR) => {\n    dispatch({ type: 'SET_DISCOUNTING_RATE', payload: newDR });\n  }\n\n  // 割引率調整\n  const textDRInput = `\n    LEVによる収益判断のための割引率を設定。割引率が0%の場合は、林業純益 ＝ 正味現在価値となります。\n    `;\n  const handleDiscountingRateInput = (event) => {\n    setDiscountingRate(event.target.value === '' ? NaN : Number(event.target.value));\n  };\n  const handleDiscountingRateBlur = () => {\n    if (discountingRate < 0) {\n      setDiscountingRate(0);\n    } else if (discountingRate > 2) {\n      setDiscountingRate(2);\n    }\n  };\n\n\n  // 出力\n  return (\n    <Box sx={{mx:{xs:6},}}>\n      {/*割引率選択*/}\n      <InputLabel htmlFor=\"outlined-adornment-amount\">割引率</InputLabel>\n      <WideTooltip title={textDRInput} placement=\"top\" arrow>\n        <OutlinedInput\n          sx={{\n            backgroundColor: \"#ffffff\",\n            width: 108,\n          }}\n          value={discountingRate}\n          endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n          onChange={handleDiscountingRateInput}\n          onBlur={handleDiscountingRateBlur}\n          inputProps={{\n            step: 0.1,\n            min: 0.0,\n            max: 2.0,\n            type: 'number',\n            'aria-labelledby': 'discountingRate',\n          }}\n        />\n      </WideTooltip>\n    </Box>\n  );\n}\n\nexport default SelectorDR;\n","//\n// stage-2 用の 製材歩留セレクタコンポーネント\n//\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Material-UI selector （var 5）\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport { styled } from '@mui/styles';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\n//\n\n// サイズ指定可能なtool-tipボックス\nconst WideTooltip = styled(({ className, ...props }) => (\n  <Tooltip {...props} classes={{ popper: className }} />\n))({\n  [`& .${tooltipClasses.tooltip}`]: {\n    maxWidth: 300,\n  },\n});\n\n// コンポーネント本体\nfunction SelectorPY() {\n  // 各種hook設定\n  const dispatch = useDispatch();\n  const processYield = useSelector(state => state.processYield);\n  const setProcessYield = (newPY) => {\n    dispatch({ type: 'SET_PROCESS_YIELD', payload: newPY });\n  }\n\n  // 歩留まり調整\n  const textPYInput = `\n    LEVによる収益判断のための丸太生産歩留まりを設定。\n    `;\n  const handleProcessYieldInput = (event) => {\n    setProcessYield(event.target.value === '' ? NaN : Number(event.target.value));\n  };\n  const handleProcessYieldBlur = () => {\n    if (processYield < 0.1) {\n      setProcessYield(0.1);\n    } else if (processYield > 1.0) {\n      setProcessYield(1.0);\n    }\n  };\n\n\n  // 出力\n  return (\n    <Box sx={{mx:{xs:6},}}>\n      {/*製材歩留選択*/}\n      <InputLabel htmlFor=\"outlined-adornment-amount\">歩留</InputLabel>\n      <WideTooltip title={textPYInput} placement=\"top-start\" arrow>\n        <OutlinedInput\n          sx={{\n            backgroundColor: \"#ffffff\",\n            width: 108,\n          }}\n          value={processYield}\n          onChange={handleProcessYieldInput}\n          onBlur={handleProcessYieldBlur}\n          inputProps={{\n            step: 0.1,\n            min: 0.1,\n            max: 1.0,\n            type: 'number',\n            'aria-labelledby': 'processYield',\n          }}\n        />\n      </WideTooltip>\n    </Box>\n  );\n}\n\nexport default SelectorPY;\n","// 密度管理図概要カード\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/system/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\n\r\n\r\nconst CalcSDMSummary = (sdm, height, planting) => {\r\n  const outMaxD = sdm.densityHMaxD(height);\r\n  const outMaxV = sdm.volumeMaxD2(outMaxD)\r\n  const outDV = sdm.PH2DV2(height, planting);\r\n  const outRy = outDV.volume / outMaxV;\r\n  return (\r\n    <Card\r\n      id=\"DC-summary\"\r\n      sx={{\r\n        width: 460,\r\n        heigh: 240,\r\n        boxShadow: 3,\r\n      }}\r\n    >\r\n      <CardHeader title=\"密度管理図概要\"\r\n        sx={{\r\n          backgroundColor: '#d4d4d4',\r\n          p: 1,\r\n          ml: 0,\r\n          //height: { xs: 1 },\r\n        }}\r\n      />\r\n      <CardContent\r\n        sx={{\r\n          m: 0,\r\n        }}\r\n      >\r\n        <Typography l={0.8} id=\"result DC\" component=\"div\">\r\n          <Box textAlign=\"left\" m={0}>\r\n            ・樹高{height}m時の最多密度:\r\n            <font size=\"+1\"> {Math.round(outMaxD)} </font> 本ha<sup>-1</sup>\r\n          </Box>\r\n          <Box textAlign=\"left\" m={0}>\r\n            ・樹高{height}m時の最多林分材積:\r\n            <font size=\"+1\"> {Math.round(outMaxV)} </font> m<sup>3</sup>ha<sup>-1</sup>\r\n          </Box>\r\n          <Box textAlign=\"left\" m={0}>\r\n            ・{planting}本植栽で樹高{height}mの材積:\r\n            <font size=\"+1\"> {Math.round(outDV.volume)} </font> m<sup>3</sup>ha<sup>-1</sup>\r\n          </Box>\r\n          <Box textAlign=\"left\" m={0}>\r\n            ・{planting}本植栽で樹高{height}mの個体密度:\r\n            <font size=\"+1\"> {Math.round(outDV.density)} </font> 本 ha<sup>-1</sup>\r\n          </Box>\r\n          <Box textAlign=\"left\" m={0}>\r\n            ・樹高{height}m時の収量比数:\r\n            <font size=\"+1\" color={outRy > 0.95 ? \"red\" : \"black\"}> {Math.round(outRy * 100) / 100} </font>\r\n          </Box>\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CalcSDMSummary;\r\n","// 密度管理図関連の計算式クラス\r\n// 基本パラメータは、parameters.json で管理\r\nimport brentsMethod from 'brents-method';\r\nimport minimize from 'minimize-golden-section-1d';\r\n//\r\nconst parameters = require('./parameters.json');\r\n\r\nclass SDMDiagram {\r\n  constructor(id) {\r\n    // まずパラメータを取得可能かどうかチェック。\r\n    this.id = id != null ? id : 0;\r\n\r\n    let p = parameters[id];\r\n    let k1 = p.b4 / (p.b2 - p.b4);\r\n    const setK2 = (k1) => { return p.Rf / p.b3 * (p.Rf / (1 - p.Rf) * p.b1 / p.b3) ** k1 };\r\n    const setK5 = (k1) => { return k1 * p.Rf / p.b3 * (p.Rf / (1 - p.Rf) * p.b1 / p.b3) ** k1 * (p.b2 / p.b4) ** (k1 + 1) };\r\n    // これ以降、パラメータ代入\r\n    this.p = p;\r\n    this.k1 = k1;\r\n    this.k2 = setK2(k1);\r\n    this.k5 = setK5(k1);\r\n    this.state = {\r\n      p: p,\r\n      k1: k1,\r\n      k2: this.k2,\r\n      k5: this.k5,\r\n    };\r\n  };\r\n\r\n  // パラメータ再設定\r\n  setParms = async (inputID) => {\r\n    let localID = inputID == null ? this.id : inputID;\r\n    let lp = parameters[localID];\r\n    let lk1 = lp.b4 / (lp.b2 - lp.b4);\r\n\r\n    const setK2l = (k1) => { return lp.Rf / lp.b3 * (lp.Rf / (1 - lp.Rf) * lp.b1 / lp.b3) ** k1 };\r\n    const setK5l = (k1) => { return k1 * lp.Rf / lp.b3 * (lp.Rf / (1 - lp.Rf) * lp.b1 / lp.b3) ** k1 * (lp.b2 / lp.b4) ** (k1 + 1) };\r\n\r\n    this.id = localID;\r\n    this.p = lp;\r\n    this.k1 = lk1;\r\n    this.k2 = setK2l(lk1);\r\n    this.k5 = setK5l(lk1);\r\n    this.state = {\r\n      p: lp,\r\n      k1: lk1,\r\n      k2: this.k2,\r\n      k5: this.k5,\r\n    };\r\n\r\n    return 0;\r\n  }\r\n\r\n  // 最大到達密度（植栽本数から自然枯死のみで最多密度に達したときの個体数）\r\n  maximumDensity(planting) {\r\n    return (this.k1 + 1) / this.k1 * planting;\r\n  }\r\n\r\n  // 自然枯死曲線（個体材積版。初期密度、平均個体材積から個体密度推定）\r\n  naturalThinning1(planting, volumeI) {\r\n    return (1 / planting - volumeI / (this.k5 * planting ** (this.k1 + 1))) ** (-1)\r\n  };\r\n\r\n  // 自然枯死曲線（林分材積版。初期密度、林分材積から個体密度推定）\r\n  naturalThinning2(planting, volumeA) {\r\n    return (planting + volumeA / (this.k5 * planting ** (this.k1)))\r\n  };\r\n\r\n  // 最多密度曲線（個体材積版。 最多密度となる場合の平均個体材積を推定）\r\n  volumeMaxD1(density) {\r\n    return this.k2 * density ** this.k1;\r\n  };\r\n\r\n  // 最多密度曲線（林分材積版。 最多密度となる場合の林分材積を推定）\r\n  volumeMaxD2(density) {\r\n    return this.k2 * density ** (this.k1 + 1);\r\n  };\r\n\r\n  // 最多密度（個体材積版。与えられた樹高時の最多密度）\r\n  densityHMaxD(height) {\r\n    return (1 - this.p.Rf) / this.p.Rf * this.p.b3 / this.p.b1 * height ** (this.p.b4 - this.p.b2);\r\n  }\r\n\r\n  // 最多密度（林分材積版。与えられた林分材積に相当する個体密度（volumeMaxD2 の逆数））\r\n  densityV2MaxD(volumeA) {\r\n    return (volumeA / (this.k2)) ** (1 / (this.k1 + 1));\r\n  }\r\n\r\n  // 等平均樹高曲線（個体材積版。樹高・立木密度から平均個体材積を推定）\r\n  volumeHD1(height, density) {\r\n    const dMax = this.densityHMaxD(height);\r\n    let density2 = Math.min(density, dMax);\r\n    return (density2 * this.p.b1 * height ** this.p.b2 + this.p.b3 * height ** this.p.b4) ** (-1);\r\n  };\r\n\r\n  // 等平均樹高曲線（林分材積版。樹高・立木密度から林分材積を推定）\r\n  volumeHD2(height, density) {\r\n    // 最多密度以上にならないように個体密度を調整\r\n    const dMax = this.densityHMaxD(height);\r\n    let density2 = Math.min(density, dMax);\r\n    return (this.p.b1 * height ** this.p.b2 + (1 / density2) * this.p.b3 * height ** this.p.b4) ** (-1);\r\n  };\r\n\r\n  // 樹高・林分材積から個体密度推定（等平均樹高曲線・個体材積版の逆関数）\r\n  densityHV1(height, volumeI) {\r\n    return ((1 / volumeI - this.p.b3 * height ** this.p.b4) * 1 / (this.p.b1 * height ** this.p.b2));\r\n  }\r\n\r\n  // 樹高・林分材積から個体密度推定（等平均樹高曲線・林分材積版の逆関数）\r\n  densityHV2(height, volumeA) {\r\n    return ((volumeA * this.p.b3 * height ** this.p.b4) / (1 - volumeA * this.p.b1 * height ** this.p.b2));\r\n  }\r\n\r\n  // 目標樹高材積（林分材積版。初期密度と目標樹高から林分材積、個体密度を推定）\r\n  PH2DV2(height, planting) {\r\n    // ブレンツ法で目標樹高時の個体密度を求解\r\n    let resultD = brentsMethod(\r\n      x => this.volumeHD2(height, x) - (x - planting) * (this.k5 * planting ** (this.k1)),\r\n      0,\r\n      planting,\r\n      { errorTolerance: 1e-4, maxIterations: 100 },\r\n    );\r\n    let resultV = this.volumeHD2(height, resultD);\r\n    const altDensity = this.densityHMaxD(height);\r\n    const altVolume = this.volumeMaxD2(altDensity);\r\n    const dMax = this.maximumDensity(planting);\r\n\r\n    // 個体数が最多密度より少なくなっていた場合、最多密度とする。\r\n    if (resultD < dMax) {\r\n      resultD = altDensity;\r\n      resultV = altVolume;\r\n    };\r\n\r\n    // 出力\r\n    return { 'density': resultD, 'volume': resultV };\r\n  };\r\n\r\n  // 植栽本数推定（林分材積版。目標樹高到達時の個体密度から植栽本数を推定（間伐影響評価用））\r\n  DV2Planting2(density, volumeA) {\r\n    // ブレンツ法で目標樹高時の個体密度を求解\r\n    return brentsMethod(\r\n      x => density - (x + volumeA / (this.k5 * x ** (this.k1))),\r\n      0,\r\n      density,\r\n      { errorTolerance: 1e-2, maxIterations: 100 },\r\n    );\r\n  }\r\n\r\n  // 樹高、材積から植栽本数を推定（林分材積版。）\r\n  HV2Planting2(height, volumeA) {\r\n    // ブレンツ法で目標樹高時の個体密度を求解\r\n    return brentsMethod(\r\n      x => x + volumeA / (this.k5 * x ** (this.k1)) - (this.p.b3 * height ** this.p.b4) / (1 / volumeA - this.p.b1 * height ** this.p.b2),\r\n      0,\r\n      5000,  // caution!! 植栽本数の上限を設定しています。\r\n      { errorTolerance: 1e-2, maxIterations: 100 },\r\n    );\r\n  }\r\n\r\n  // 与えられた樹高における最適植栽本数（＝収益最大化）\r\n  OptimalPlanting(height, revenue, priceSapling, costManagement) {\r\n    const func = (planting) => {\r\n      const volumeHat = this.PH2DV2(height, planting).volume;\r\n      return (-(volumeHat * revenue - (costManagement + planting * priceSapling)));\r\n    };\r\n\r\n    // 数値最適化\r\n    let solution = minimize(func,  {tolerance: 1e-3, lowerBound: 0, upperBound: 5000});\r\n    return (solution);\r\n  }\r\n};\r\n\r\nexport default SDMDiagram;","/*\r\n// 密度管理図自体の要望がどうしても生じるので、作図できるようにする。\r\n*/\r\nimport React from 'react';\r\n// import _ from 'underscore';\r\nimport SDMDiagram from './sdm-core';\r\n//\r\n//\r\nimport { scaleLog, scaleOrdinal } from '@visx/scale';\r\nimport { AxisLeft, AxisBottom } from '@visx/axis';\r\nimport { GridRows, GridColumns } from '@visx/grid';\r\nimport { Group } from '@visx/group';\r\nimport { curveBasis, curveLinear, curveNatural, curveCardinal } from '@visx/curve';\r\nimport { LinePath } from '@visx/shape';\r\nimport { GlyphStar } from '@visx/glyph';\r\nimport { Text } from '@visx/text';\r\nimport { LegendOrdinal } from '@visx/legend';\r\n//\r\nimport { Card, CardContent } from '@mui/material';\r\nimport CardHeader from '@mui/material/CardHeader';\r\n\r\nfunction DrawSDMDiagram(id, plantingInput, dv) {\r\n  // x軸範囲設定\r\n  const xTop = (plantingInput <= 5000 ? 5000 : 12000);\r\n  const xBottom = 100;\r\n  const xTickValue = [500, 1000, 2000, 3000, 4000, 5000];\r\n  const xTickValueEx = [500, 1000, 5000, 10000];\r\n\r\n  // 植栽本数配列\r\n  const planting = new Array(24).fill(null).map((_, i) => (i + 1) * 500);\r\n  // 樹高配列\r\n  const height = new Array(41).fill(null).map((_, i) => (i + 2));\r\n  // 個体密度配列\r\n  const density = new Array(41).fill(null).map((_, i) => (xBottom + i * 200));\r\n  // 収量比数配列\r\n  const ry = [1, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5];\r\n\r\n  // 密度管理コアオブジェクト作成\r\n  let localDC = new SDMDiagram(id);\r\n\r\n  // y軸範囲設定\r\n  const yTop = Math.ceil(localDC.volumeMaxD2(localDC.densityHMaxD(Math.max(...height))) / 1000) * 1000;  // スプレッド構文 (...) の利用で最大値取得\r\n  const bottomTmp = localDC.volumeHD2(10, xBottom);\r\n  const yBottom = bottomTmp > 10 ? Math.floor(bottomTmp / 10) * 10 : 10;\r\n  const yLabel = '林分材積（ m^3 ／ ha）';\r\n\r\n  // scales (対数軸設定)\r\n  const densityScale = scaleLog({\r\n    domain: [xBottom, xTop],\r\n    clamp: true,\r\n  });\r\n  const volumeScale = scaleLog({\r\n    domain: [yBottom, yTop],\r\n    clamp: true,\r\n  });\r\n  // graph margin\r\n  const defaultMargin = { top: 30, right: 30, bottom: 70, left: 70 };\r\n\r\n  // 自然枯死曲線描画用データ\r\n  const nThinning = planting\r\n    .map(\r\n      (x) => (height\r\n        .flatMap(\r\n          (y) => {\r\n            const dv = localDC.PH2DV2(y, x);\r\n            return (\r\n              dv.density >= xBottom && dv.density <= xTop && dv.volume >= yBottom && dv.volume <= yTop\r\n                ? dv\r\n                : []\r\n            )\r\n          }\r\n        )\r\n      )\r\n    );\r\n\r\n  // 等樹高曲線データ\r\n  let evenHeight = height.filter(h => h % 5 === 0)\r\n    .map(\r\n      (h) => {\r\n        const densityPlus = density.concat([localDC.densityHMaxD(h)]);\r\n        return (\r\n          densityPlus.flatMap(\r\n            (d) => {\r\n              const MaxD = localDC.densityHMaxD(h);\r\n              const vol = localDC.volumeHD2(h, d)\r\n              return (\r\n                d <= MaxD && d <= xTop && d >= xBottom && vol >= yBottom && vol <= yTop\r\n                  ? { density: d, volume: vol }\r\n                  : []\r\n              )\r\n            }\r\n          )\r\n        )\r\n      }\r\n    );\r\n  // 等樹高曲線ラベルデータ\r\n  const labelEvenHeight = evenHeight.filter(d => d.length > 0)\r\n    .map((d, i) => {\r\n      return (\r\n        { height: (i + 1) * 5, density: d[0].density, volume: d[0].volume, }\r\n      )\r\n    });\r\n\r\n  // 収量比数線データ\r\n  // height における最多密度とその際の林分材積\r\n  const dvMaxD = height.map((h) => {\r\n    const outDensity = localDC.densityHMaxD(h);\r\n    return ({ density: outDensity, volume: localDC.volumeMaxD2(outDensity) });\r\n  });\r\n  // height における各収量比数時の林分材積と個体密度（flatMapで枠外データ除外）\r\n  const ryTarget = ry.map(r => (\r\n    dvMaxD.flatMap((dv, i) => {\r\n      const vol = r * dv.volume;\r\n      const den = localDC.densityHV2((i + 2), vol);\r\n      return (\r\n        vol <= yTop && vol > yBottom && den > xBottom && den <= xTop\r\n          ? { density: den, volume: vol }\r\n          : []\r\n      );\r\n    })\r\n  ));\r\n  // 収量比数線ラベルデータ\r\n  const labelRy = ryTarget.filter(d => d.length > 0)\r\n    .map((d, i) => {\r\n      return (\r\n        { ry: ry[i], density: d[d.length - 1].density, volume: d[d.length - 1].volume, }\r\n      )\r\n    });\r\n\r\n  // 凡例データ\r\n  const legendScale = scaleOrdinal({\r\n    domain: [\"自然枯死線\", \"等収量比数線\", \"等平均樹高線\"],\r\n    range: [\"#2A2\", \"#A33\", \"#22A\"],\r\n  });\r\n\r\n\r\n\r\n  // グラフ描画設定\r\n  const svgWidth = 640;\r\n  const svgHeight = 480;\r\n  const background = '#f8f8f8'; // うっすら灰色\r\n  const margin = defaultMargin;\r\n  const xMax = svgWidth - margin.left - margin.right;\r\n  const yMax = svgHeight - margin.top - margin.bottom;\r\n  densityScale.range([0, xMax]);\r\n  volumeScale.range([yMax, 0]);\r\n\r\n  return (\r\n    nThinning != null ?\r\n      <Card\r\n        id=\"LEV-summary\"\r\n        sx={{\r\n          width: 660,\r\n          height: 500,\r\n          boxShadow: 3,\r\n        }}\r\n      >\r\n        <CardContent\r\n          sx={{\r\n            p: 1,\r\n          }}\r\n        >\r\n          <svg width={svgWidth} height={svgHeight}>\r\n            {/* グラフ描画ボックス */}\r\n            <rect x={0} y={0} width={svgWidth} height={svgHeight} fill={background} rx={14} />\r\n            <Group left={margin.left} top={margin.top}>\r\n\r\n              {/* 軸描画 */}\r\n              <GridRows scale={volumeScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\r\n              <GridColumns scale={densityScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\r\n              <line x1={xMax} x2={xMax} y1={0} y2={yMax} stroke=\"#e0e0e0\" />\r\n              <AxisBottom\r\n                top={yMax}\r\n                scale={densityScale}\r\n                tickValues={plantingInput <= 5000 ? xTickValue : xTickValueEx}\r\n                tickFormat={(v) => { return `${v}` }}\r\n                label={\"個体密度 (本／ha)\"}\r\n                labelProps={{ fontSize: 16, textAnchor: \"middle\", }}\r\n              />\r\n              <AxisLeft\r\n                scale={volumeScale}\r\n                numTicks={5}\r\n                tickValues={[20, 50, 100, 200, 500, 1000, 2000]}\r\n                tickFormat={(v) => { return `${v}` }}\r\n                label={`${yLabel}`}\r\n                labelProps={{ fontSize: 16, textAnchor: \"middle\", }}\r\n              />\r\n\r\n              {/* 自然枯死曲線描画 */}\r\n              {nThinning.map((data, index) => {\r\n                return (\r\n                  <LinePath\r\n                    data={data}\r\n                    curve={curveBasis}\r\n                    x={(d) => densityScale(d.density) ?? 0}\r\n                    y={(d) => volumeScale(d.volume) ?? 0}\r\n                    stroke=\"#2A2\"\r\n                    strokeWidth={1.2}\r\n                    strokeOpacity={0.8}\r\n                  />\r\n                )\r\n              })}\r\n\r\n              {/* 等樹高曲線描画 */}\r\n              {evenHeight.map((data, index) => {\r\n                return (\r\n                  <LinePath\r\n                    data={data}\r\n                    curve={curveCardinal}\r\n                    x={(d) => densityScale(d.density) ?? 0}\r\n                    y={(d) => volumeScale(d.volume) ?? 0}\r\n                    stroke=\"#22A\"\r\n                    strokeWidth={1}\r\n                    strokeOpacity={0.8}\r\n                  />\r\n                )\r\n              })}\r\n              {/* 等樹高曲線ラベル */}\r\n              {labelEvenHeight.filter(d => d.height % 10 === 0)\r\n                .map((data) => {\r\n                  return (\r\n                    <Text\r\n                      x={densityScale(data.density * 1.1)}\r\n                      y={volumeScale(data.volume * 1.1)}\r\n                      fill=\"#22A\"\r\n                      verticalAnchor=\"start\"\r\n                      fontSize=\"0.8em\"\r\n                    >\r\n                      {`${data.height}m`}\r\n                    </Text>\r\n                  );\r\n                })}\r\n\r\n              {/* 収量比数線描画 */}\r\n              {ryTarget.map((data, index) => {\r\n                return (\r\n                  index === 1 ?\r\n                    /* Ry =0.95 は破線にする */\r\n                    <LinePath\r\n                      data={data}\r\n                      curve={curveNatural}\r\n                      x={(d) => densityScale(d.density) ?? 0}\r\n                      y={(d) => volumeScale(d.volume) ?? 0}\r\n                      stroke=\"#A33\"\r\n                      strokeWidth={1}\r\n                      strokeDasharray={[9, 5]}  // 破線の設定\r\n                      strokeOpacity={0.8}\r\n                    />\r\n                    /* それ以外は実線に */\r\n                    : <LinePath\r\n                      data={data}\r\n                      curve={curveNatural}\r\n                      x={(d) => densityScale(d.density) ?? 0}\r\n                      y={(d) => volumeScale(d.volume) ?? 0}\r\n                      stroke=\"#A33\"\r\n                      strokeWidth={1}\r\n                      strokeOpacity={0.8}\r\n                    />\r\n                )\r\n              })}\r\n              {/* 収量比数線ラベル */}\r\n              {labelRy.filter(d => (d.ry * 10 + 1) % 2 === 0)\r\n                .map((data) => {\r\n                  return (\r\n                    <Text\r\n                      x={densityScale(data.density)}\r\n                      y={volumeScale(data.volume)}\r\n                      fill=\"#A33\"\r\n                      textAnchor=\"middle\"\r\n                      horizontalAnchor=\"end\"\r\n                      fontSize=\"0.8em\"\r\n                    >\r\n                      {`Ry=${data.ry}`}\r\n                    </Text>\r\n                  );\r\n                })}\r\n            </Group>\r\n            <Group left={margin.left} top={margin.top}>\r\n              <GlyphStar\r\n                left={densityScale(dv.density) ?? 0}\r\n                top={volumeScale(dv.volume) ?? 0}\r\n                size={110}\r\n                fill=\"#FFA\"\r\n                stroke=\"#AA3\"\r\n                strokeWidth={2}\r\n              />\r\n            </Group>\r\n\r\n          </svg>\r\n          {/* 凡例 */}\r\n          <Card\r\n            variant=\"outlined\"\r\n            sx={{\r\n              width: 140,\r\n              height: 60,\r\n              position: 'relative',\r\n              top: -475,\r\n              left: 510,\r\n            }}\r\n          >\r\n            <CardContent\r\n              sx={{\r\n                fontSize: 12,\r\n                align: \"center\",\r\n                lineHeight: 1.5,\r\n                ml: 1,\r\n                mr: 1,\r\n                mt: 0,\r\n                p: 0,\r\n              }}\r\n            >\r\n              <LegendOrdinal\r\n                scale={legendScale}\r\n                direction=\"column\"\r\n                itemDirection=\"row\"\r\n                shape=\"line\"\r\n                labelMargin=\"0 15px 0 0\"\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </CardContent>\r\n      </Card>\r\n      : \"\"\r\n  );\r\n};\r\n\r\nexport default DrawSDMDiagram;\r\n\r\n","// LEV概要カード\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/system/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\n//\r\n\r\n// LEV計算\r\nconst CalcLEVSummary = (sdm, lev, optP, optV, mai, priceSapling, costMgmt) => {\r\n  const thresholdYear = lev.threshold(optV);\r\n  const thresholdMAI = isNaN(thresholdYear) ? NaN : optV / thresholdYear;\r\n  const revenueForestry = lev.fc(optV) * 1e-4 - (optP * priceSapling * 1e-4 + costMgmt);\r\n  const npvOutput = lev.npv(optV, optV / mai);\r\n  const levOutput = lev.lev(optV, optV / mai);\r\n\r\n  // IRR計算\r\n  // データは、［年, 収支］のネスト配列\r\n  // 厳密には、施業コストは発生年毎に記載すべきだが、初年度に全てのコストが発生するとする。\r\n  const balance = [[0, -(optP * priceSapling * 1e-4 + costMgmt)],[Math.ceil(optV / mai), lev.fc(optV) * 1e-4]];\r\n  const irrOutput = lev.irr(balance);\r\n\r\n  return (\r\n    <Card\r\n      id=\"LEV-summary\"\r\n      sx={{\r\n        width: 560,\r\n        boxShadow: 3,\r\n      }}\r\n    >\r\n      <CardContent\r\n        sx={{\r\n          m: 1,\r\n        }}\r\n      >\r\n        <Typography l={1} component=\"div\">\r\n          <Box textAlign=\"left\" m={0.5}>\r\n            ・林業純益:\r\n            <font size=\"+1\"> {Math.round(revenueForestry)} </font> 万円\r\n          </Box>\r\n          <Box textAlign=\"left\" m={0.5}>\r\n            ・LEVがプラスになる平均年成長量 (MAI):\r\n            <font size=\"+1\"> {Math.ceil(thresholdMAI)} </font> m<sup>3</sup>ha<sup>-1</sup>年<sup>-1</sup> 以上\r\n          </Box>\r\n          {/*\r\n            mai > thresholdMAI ? */}\r\n              <>\r\n                <Box textAlign=\"left\" m={0.5}>\r\n                  ・MAIが {mai}m<sup>3</sup>ha<sup>-1</sup>年<sup>-1</sup>の時の伐期:\r\n                  <font size=\"+1\"> {Math.ceil(optV / mai)} </font> 年\r\n                </Box>\r\n                <Box textAlign=\"left\" m={0.5}>\r\n                  ・内部収益率（IRR）:\r\n                  <font size=\"+1\"> {Math.round(irrOutput * 10000)/100} </font> %\r\n                </Box>\r\n                <Box textAlign=\"left\" m={0.5}>\r\n                  ・正味現在価値（NPV）:\r\n                  <font size=\"+1\"> {Math.round(npvOutput / 10000)} </font> 万円\r\n                </Box>\r\n                <Box textAlign=\"left\" m={0.5}>\r\n                  ・土地希望価値（LEV）:\r\n                  <font size=\"+1\"> {Math.round(levOutput / 10000)} </font> 万円\r\n                </Box>\r\n              </>\r\n            {/*  : \"\"\r\n          */}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CalcLEVSummary;\r\n","/*\r\n// 目的樹高設定時に収支最大となる植栽本数を求めるようにする\r\n*/\r\nimport React from 'react';\r\n//\r\nimport { scaleLinear, scaleOrdinal } from '@visx/scale';\r\nimport { AxisLeft, AxisBottom } from '@visx/axis';\r\nimport { GridRows, GridColumns } from '@visx/grid';\r\nimport { Group } from '@visx/group';\r\nimport { curveBasis } from '@visx/curve';\r\nimport { LinePath } from '@visx/shape';\r\nimport { Annotation, Label, Connector, LineSubject } from '@visx/annotation';\r\nimport { LegendOrdinal } from '@visx/legend';\r\n//\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport { Card, CardContent } from '@mui/material';\r\nimport { positions } from '@mui/system';\r\n//\r\n\r\nfunction OptimalPlanting(sdm, lev, height, priceSapling, costManagement, optP, optV) {\r\n  // x軸範囲設定\r\n  const xTop = 6000;\r\n  const xBottom = 500;\r\n\r\n  // 植栽本数配列\r\n  const planting = new Array(56).fill(null).map((_, i) => (i) * 100 + 500);\r\n\r\n  // 純収益（材単価 - 立米あたりの伐出コスト。いずれ スライダーに）\r\n  // const revenueNet = 5000;\r\n  // 苗木価格 （これもいずれスライダーに）\r\n  // const priceSapling = 100;\r\n  // 造・育林コスト（これは固定値か？）\r\n  // const costManagement = 2e6;\r\n\r\n  // 植栽本数・目標樹高から、材積を計算\r\n  const volume = planting.flatMap(p => (sdm.PH2DV2(height, p).volume));\r\n\r\n  // 主線描画データ作成\r\n  const balanceData = planting.map((p, i) => ({\r\n    planting: p,\r\n    cost: p * priceSapling / 10000 + costManagement,\r\n    revenue: Math.round(lev.fc(volume[i]) / 1000) / 10,\r\n  }));\r\n  // 最適植栽本数描画データ作成\r\n  const optPlantingData = [\r\n    { planting: optP, back: 0, balance: optP * priceSapling / 10000 + costManagement },\r\n    { planting: optP, back: 500, balance: Math.round(lev.fc(optV) / 1000) / 10 },\r\n  ];\r\n  // 収益最大値\r\n  const revenueMax = balanceData[55].revenue;\r\n\r\n  // y軸範囲設定\r\n  const yTop = revenueMax < 500 ? 500 : revenueMax ;\r\n  const yBottom = 0;\r\n\r\n  // scales\r\n  const plantingScale = scaleLinear({\r\n    domain: [xBottom, xTop],\r\n    clamp: true,\r\n  });\r\n  const balanceScale = scaleLinear({\r\n    domain: [yBottom, yTop],\r\n    clamp: true,\r\n  });\r\n  const legendScale = scaleOrdinal({\r\n    domain: [\"伐出純益\", \"植栽・育林コスト\"],\r\n    range: [\"#282\", \"#A22\"],\r\n  });\r\n  // graph margin\r\n  const defaultMargin = { top: 30, right: 30, bottom: 70, left: 70 };\r\n\r\n  // グラフ描画設定\r\n  const svgWidth = 640;\r\n  const svgHeight = 480;\r\n  const background = '#f8f8f8'; // うっすら灰色\r\n  const margin = defaultMargin;\r\n  const xMax = svgWidth - margin.left - margin.right;\r\n  const yMax = svgHeight - margin.top - margin.bottom;\r\n  plantingScale.range([0, xMax]);\r\n  balanceScale.range([yMax, 0]);\r\n\r\n  return (\r\n    <Card\r\n      id=\"LEV-summary\"\r\n      sx={{\r\n        width: 660,\r\n        height: 500,\r\n        boxShadow: 3,\r\n      }}\r\n    >\r\n      <CardContent\r\n        sx={{\r\n          m: 0,\r\n          p: 1,\r\n        }}\r\n      >\r\n        <svg width={svgWidth} height={svgHeight}>\r\n          {/* グラフ描画ボックス */}\r\n\r\n          <rect x={0} y={0} width={svgWidth} height={svgHeight} fill={background} rx={14} />\r\n          <Group left={margin.left} top={margin.top}>\r\n            {/* 軸描画 */}\r\n            <GridRows scale={balanceScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\r\n            <GridColumns scale={plantingScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\r\n            <line x1={xMax} x2={xMax} y1={0} y2={yMax} stroke=\"#e0e0e0\" />\r\n            <AxisBottom\r\n              top={yMax}\r\n              scale={plantingScale}\r\n              label={\"植栽本数（本／ha）\"}\r\n              labelProps={{ fontSize: 16, textAnchor: \"middle\", }}\r\n            />\r\n            <AxisLeft\r\n              scale={balanceScale}\r\n              numTicks={5}\r\n              label={\"金額（万円）\"}\r\n              labelProps={{ fontSize: 16, textAnchor: \"middle\", }}\r\n            />\r\n            {/* 材収益 */}\r\n            <LinePath\r\n              data={balanceData}\r\n              curve={curveBasis}\r\n              x={(d) => plantingScale(d.planting) ?? 0}\r\n              y={(d) => balanceScale(d.revenue) ?? 0}\r\n              stroke=\"#282\"\r\n              strokeWidth={1.5}\r\n              strokeOpacity={0.8}\r\n            />\r\n            {/* 苗木コスト */}\r\n            <LinePath\r\n              data={balanceData}\r\n              curve={curveBasis}\r\n              x={(d) => plantingScale(d.planting) ?? 0}\r\n              y={(d) => balanceScale(d.cost) ?? 0}\r\n              stroke=\"#A02020\"\r\n              strokeWidth={1.5}\r\n              strokeOpacity={1}\r\n            />\r\n            {/* 最適植栽本数ライン */}\r\n            <LinePath\r\n              data={optPlantingData}\r\n              curve={curveBasis}\r\n              x={(d) => plantingScale(d.planting) ?? 0}\r\n              y={(d) => balanceScale(d.balance) ?? 0}\r\n              stroke={optPlantingData[0].balance >= optPlantingData[1].balance ? \"\" : \"#FA2\"}\r\n              strokeWidth={4}\r\n              strokeOpacity={1}\r\n            />\r\n            {/* 注釈-収益 */}\r\n            {optPlantingData[1].balance > optPlantingData[0].balance\r\n              ?\r\n              <Annotation\r\n                x={plantingScale(optPlantingData[1].planting) ?? 0}\r\n                y={balanceScale(optPlantingData[1].balance) ?? 0}\r\n                dx={60}\r\n                dy={balanceScale(optPlantingData[1].balance) - 60 > 0 ? -30 : 80 - balanceScale(optPlantingData[1].balance)}\r\n              >\r\n                <Connector stroke={\"#ff7e67\"} type={\"elbow\"} />\r\n                <Label\r\n                  backgroundFill=\"white\"\r\n                  showAnchorLine={\"true\"}\r\n                  anchorLineStroke={\"#228b22\"}\r\n                  backgroundProps={{ stroke: \"#ecf4f3\" }}\r\n                  fontColor={\"#2f4f4f\"}\r\n                  horizontalAnchor={\"start\"}\r\n                  verticalAnchor={plantingScale(optP) + 165 > 0 ? \"middle\" : \"top\"}\r\n                  title={\"収益\"}\r\n                  titleFontSize={12}\r\n                  titleFontWeight={800}\r\n                  titleProps={{ textAnchor: \"middle\" }}\r\n                  subtitle={\r\n                    Math.round(optPlantingData[1].balance) + \" 万円  \"\r\n                    + \"(\" + Math.round(optV) + \" m3)\"\r\n                  }\r\n                  subtitleFontSize={16}\r\n                  subtitleDy={2}\r\n                  subtitleProps={{ textAnchor: \"middle\" }}\r\n                  Maxwidth={120}\r\n                />\r\n              </Annotation>\r\n              : \"\"\r\n            }\r\n            {/* 注釈-造林コスト */}\r\n            <Annotation\r\n              x={plantingScale(optPlantingData[0].planting) ?? 0}\r\n              y={balanceScale(optPlantingData[0].balance) ?? 0}\r\n              dx={plantingScale(optP) - 165 > 0 ? -60 : 60}\r\n              dy={balanceScale(optPlantingData[0].balance) + 80 < 340 ? 30 : 260 - balanceScale(optPlantingData[0].balance)}\r\n            >\r\n              <Connector stroke={\"#ff7e67\"} type={\"elbow\"} />\r\n              <Label\r\n                backgroundFill=\"white\"\r\n                showAnchorLine={\"true\"}\r\n                anchorLineStroke={\"#dc143c\"}\r\n                backgroundProps={{ stroke: \"#ecf4f3\" }}\r\n                fontColor={\"#800000\"}\r\n                horizontalAnchor={plantingScale(optP) - 165 > 0 ? \"end\" : \"start\"}\r\n                verticalAnchor={\"middle\"}\r\n                title={\"造・育林コスト\"}\r\n                titleFontSize={12}\r\n                titleFontWeight={800}\r\n                titleProps={{ textAnchor: \"middle\" }}\r\n                subtitle={Math.round(optPlantingData[0].balance) + \"万円\"}\r\n                subtitleFontSize={16}\r\n                subtitleDy={2}\r\n                subtitleProps={{ textAnchor: \"middle\" }}\r\n                width={100}\r\n              />\r\n            </Annotation>\r\n            {/* 注釈-最適植栽数 */}\r\n            <Annotation\r\n              x={plantingScale(optP) ?? 0}\r\n              y={balanceScale(0) ?? 0}\r\n              dx={60}\r\n              dy={-40}\r\n            >\r\n              <Connector stroke={\"#ff7e67\"} type={\"elbow\"} />\r\n              <Label\r\n                backgroundFill=\"white\"\r\n                showAnchorLine={\"true\"}\r\n                anchorLineStroke={\"#214599\"}\r\n                backgroundProps={{ stroke: \"#ecf4f3\" }}\r\n                fontColor={\"#133299\"}\r\n                horizontalAnchor={\"start\"}\r\n                title={\"最適植栽本数\"}\r\n                titleFontSize={12}\r\n                titleFontWeight={800}\r\n                titleProps={{ textAnchor: \"middle\" }}\r\n                subtitle={optP + \"本\"}\r\n                subtitleFontSize={16}\r\n                subtitleDy={2}\r\n                subtitleProps={{ textAnchor: \"middle\" }}\r\n                verticalAnchor={\"middle\"}\r\n                width={100}\r\n              />\r\n              <LineSubject\r\n                orientation={\"vertical\"}\r\n                stroke={\"#22A\"}\r\n                min={balanceScale(yBottom)}\r\n                max={balanceScale(yTop)}\r\n              />\r\n            </Annotation>\r\n          </Group>\r\n        </svg>\r\n        {/* 凡例 */}\r\n        <Card\r\n          variant=\"outlined\"\r\n          sx={{\r\n            width: 150,\r\n            height: 40,\r\n            position: 'relative',\r\n            top: -475,\r\n            left: 500,\r\n          }}\r\n        >\r\n          <CardContent\r\n            sx={{\r\n              fontSize: 12,\r\n              align: \"center\",\r\n              lineHeight: 1.5,\r\n              ml: 1,\r\n              mr: 1,\r\n              mt: 0,\r\n              p: 0,\r\n            }}\r\n          >\r\n            <LegendOrdinal\r\n              scale={legendScale}\r\n              direction=\"column\"\r\n              itemDirection=\"row\"\r\n              shape=\"line\"\r\n              labelMargin=\"0 15px 0 0\"\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default OptimalPlanting;\r\n\r\n","// LEVタイムコースグラフ\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/system/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\n//\r\nimport { scaleLinear, scaleOrdinal } from '@visx/scale';\r\nimport { AxisLeft, AxisBottom } from '@visx/axis';\r\nimport { GridRows, GridColumns } from '@visx/grid';\r\nimport { Group } from '@visx/group';\r\nimport { curveBasis, curveLinear } from '@visx/curve';\r\nimport { LinePath } from '@visx/shape';\r\nimport { Annotation, Label, Connector, CircleSubject } from '@visx/annotation';\r\n//\r\n\r\n\r\n// LEV計算\r\nconst ChartLEV = (lev, mai, optVol) => {\r\n  const dataLEV = lev.levTimeCourse(mai);\r\n  const maxLEV = dataLEV[1].reduce((a, b) => Math.max(a, b));\r\n  const yearLevMax = dataLEV[1].indexOf(maxLEV) + 1;\r\n  const yearOpt = optVol / mai;\r\n  const levOpt = lev.lev(optVol, yearOpt) / 10000;\r\n  //console.log(\"year: \" + yearOpt + \", lev: \" + levOpt + \" (\" + (maxLEV - 100) + \")\");\r\n\r\n  // x軸範囲設定\r\n  const xTop = 200;\r\n  const xBottom = 20;\r\n  // y軸範囲設定\r\n  const yTop = Math.round(maxLEV);\r\n  const yBottom = yTop - 100;\r\n  // 曲線描画用データ作成\r\n  const dataLevChart = dataLEV[0].map((d, i) => ({ year: d, lev: dataLEV[1][i] }));\r\n  //console.log(dataLevChart);\r\n  // LEV最大値描画用データ作成\r\n  const dataLevMax = [\r\n    { year: yearLevMax, lev: yBottom },\r\n    { year: yearLevMax, lev: yTop },\r\n  ];\r\n  // 最適材積線描画用データ作成\r\n  const dataOpt = [\r\n    { year: yearOpt, lev: yBottom },\r\n    { year: yearOpt, lev: levOpt },\r\n  ];\r\n  // ゼロ・ラインデータ作成\r\n  const dataZero = [\r\n    {year: 20, lev: 0},\r\n    {year: 200, lev: 0},\r\n  ]\r\n\r\n\r\n  // scales\r\n  const yearScale = scaleLinear({\r\n    domain: [xBottom, xTop],\r\n    clamp: true,\r\n  });\r\n  const levScale = scaleLinear({\r\n    domain: [yBottom, yTop],\r\n    clamp: true,\r\n  });\r\n  const legendScale = scaleOrdinal({\r\n    domain: [\"LEV最大\", \"最適材積\"],\r\n    range: [\"#ff6600\", \"#00ff66\"],\r\n  });\r\n  // graph margin\r\n  const defaultMargin = { top: 30, right: 30, bottom: 70, left: 70 };\r\n\r\n  // グラフ描画設定\r\n  const svgWidth = 640;\r\n  const svgHeight = 480;\r\n  const background = '#f8f8f8'; // うっすら灰色\r\n  const margin = defaultMargin;\r\n  const xMax = svgWidth - margin.left - margin.right;\r\n  const yMax = svgHeight - margin.top - margin.bottom;\r\n  yearScale.range([0, xMax]);\r\n  levScale.range([yMax, 0]);\r\n\r\n  // 出力\r\n  return (\r\n    <Card\r\n      id=\"LEV-summary\"\r\n      sx={{\r\n        width: 660,\r\n        boxShadow: 3,\r\n      }}\r\n    >\r\n      <CardContent\r\n        sx={{\r\n          m: 0,\r\n          p: 1,\r\n        }}\r\n      >\r\n        <svg width={svgWidth} height={svgHeight}>\r\n          {/* グラフ描画ボックス */}\r\n\r\n          <rect x={0} y={0} width={svgWidth} height={svgHeight} fill={background} rx={14} />\r\n          <Group left={margin.left} top={margin.top}>\r\n            {/* 軸描画 */}\r\n            <GridRows scale={levScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\r\n            <GridColumns scale={yearScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\r\n            <line x1={xMax} x2={xMax} y1={0} y2={yMax} stroke=\"#e0e0e0\" />\r\n            <AxisBottom\r\n              top={yMax}\r\n              scale={yearScale}\r\n              strokeWidth={1.5}\r\n              // tickLabelProps={{ fontsize: 12, }}\r\n              label={\"年\"}\r\n              labelProps={{ fontSize: 16, textAnchor: \"middle\", }}\r\n            />\r\n            <AxisLeft\r\n              scale={levScale}\r\n              numTicks={5}\r\n              strokeWidth={1.5}\r\n              // tickLabelProps={{ fontsize: 12, }}\r\n              label={\"LEV（万円）\"}\r\n              labelProps={{ fontSize: 16, textAnchor: \"middle\", }}\r\n            />\r\n            {/* LEVタイムコース */}\r\n            <LinePath\r\n              data={dataLevChart}\r\n              curve={curveBasis}\r\n              x={(d) => yearScale(d.year) ?? 0}\r\n              y={(d) => levScale(d.lev) ?? 0}\r\n              stroke=\"#000000\"\r\n              strokeWidth={3}\r\n              strokeOpacity={0.8}\r\n            />\r\n            {/* LEV最大値ライン */}\r\n            <LinePath\r\n              data={dataLevMax}\r\n              curve={curveLinear}\r\n              x={(d) => yearScale(d.year) ?? 0}\r\n              y={(d) => levScale(d.lev) ?? 0}\r\n              stroke=\"#ff6600\"\r\n              strokeWidth={2}\r\n              strokeOpacity={1}\r\n            />\r\n            {/* 最適材積ライン */}\r\n            <LinePath\r\n              data={dataOpt}\r\n              curve={curveLinear}\r\n              x={(d) => yearScale(d.year) ?? 0}\r\n              y={(d) => levScale(d.lev) ?? 0}\r\n              stroke=\"#00ff66\"\r\n              strokeWidth={2}\r\n              strokeOpacity={1}\r\n            />\r\n            {/* ゼロライン */}\r\n            <LinePath\r\n              data={dataZero}\r\n              curve={curveLinear}\r\n              x={(d) => yearScale(d.year) ?? 0}\r\n              y={(d) => levScale(d.lev) ?? 0}\r\n              stroke={maxLEV > 0? \"#0033ff\" : \"\"}\r\n              strokeWidth={2}\r\n              strokeOpacity={1}\r\n              strokeDasharray={[2,3]}\r\n            />\r\n            {/* 注釈-最適材積 */}\r\n            <Annotation\r\n              x={yearScale(dataOpt[1].year) ?? 0}\r\n              y={levScale(dataOpt[1].lev) ?? 0}\r\n              dx={0}\r\n              dy={levScale(dataOpt[1].lev) > 200 ? -100 : 120}\r\n            >\r\n              <CircleSubject\r\n                radius={14}\r\n                stroke={\"#00ff66\"}\r\n              />\r\n              <Connector stroke={\"#00ff66\"} type={\"straight\"} />\r\n              <Label\r\n                backgroundFill={\"white\"}\r\n                showAnchorLine={\"true\"}\r\n                anchorLineStroke={\"#00ff66\"}\r\n                backgroundProps={{ stroke: \"#00ff66\" }}\r\n                backgroundPadding={{ top: 5, right: 5, bottom: 10, left: 5 }}\r\n                fontColor={\"#000033\"}\r\n                horizontalAnchor={\"middle\"}\r\n                verticalAnchor={\"top\"}\r\n                title={\"最適材積 LEV\"}\r\n                titleFontSize={12}\r\n                titleFontWeight={800}\r\n                titleProps={{ textAnchor: \"middle\" }}\r\n                subtitle={\r\n                  Math.round(levOpt) + \" 万円, \"\r\n                  + Math.round(yearOpt) + \" 年  \"\r\n                  + \"(\" + Math.round(optVol) + \" m3)\"\r\n                }\r\n                subtitleFontSize={14}\r\n                subtitleDy={2}\r\n                subtitleProps={{ textAnchor: \"middle\" }}\r\n                width={120}\r\n              />\r\n            </Annotation>\r\n            {/* 注釈-maxLEV */}\r\n            <Annotation\r\n              x={yearScale(dataLevMax[1].year) ?? 0}\r\n              y={levScale(dataLevMax[1].lev) ?? 0}\r\n              dx={0}\r\n              dy={40}\r\n            >\r\n              <CircleSubject\r\n                radius={14}\r\n                stroke={\"#ff6600\"}\r\n              />\r\n              <Connector stroke={\"#ff6600\"} type={\"straight\"} />\r\n              <Label\r\n                backgroundFill={\"white\"}\r\n                showAnchorLine={\"true\"}\r\n                anchorLineStroke={\"#ff6600\"}\r\n                backgroundProps={{ stroke: \"#ff6600\" }}\r\n                backgroundPadding={{ top: 5, right: 5, bottom: 10, left: 5 }}\r\n                fontColor={\"#000033\"}\r\n                horizontalAnchor={\"middle\"}\r\n                verticalAnchor={\"top\"}\r\n                title={\"最大 LEV\"}\r\n                titleFontSize={12}\r\n                titleFontWeight={800}\r\n                titleProps={{ textAnchor: \"middle\" }}\r\n                subtitle={\r\n                  Math.round(maxLEV) + \" 万円, \"\r\n                  + Math.round(yearLevMax) + \" 年  \"\r\n                  + \"(\" + Math.round(mai * yearLevMax) + \" m3)\"\r\n                }\r\n                subtitleFontSize={14}\r\n                subtitleDy={2}\r\n                subtitleProps={{ textAnchor: \"middle\" }}\r\n                width={120}\r\n              />\r\n            </Annotation>\r\n\r\n          </Group>\r\n        </svg>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ChartLEV;\r\n","//\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\n//\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Divider from '@mui/material/Divider';\nimport Drawer from '@mui/material/Drawer';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Card from '@mui/material/Card';\nimport CardHeader from '@mui/material/CardHeader';\nimport CardContent from '@mui/material/CardContent';\nimport CardActions from '@mui/material/CardActions';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Collapse from '@mui/material/Collapse';\nimport { styled } from '@mui/material/styles';\n//\nimport SliderHeight from './slider-height';\nimport SliderPlanting from './slider-planting';\nimport SliderPriceSapling from './slider-sapling_price';\nimport SliderRevenue from './slider-revenue';\nimport SliderCostManagement from './slider-management_cost';\nimport SliderMAI from './slider-MAI';\nimport SelectorSp from './selector-sp';\nimport SelectorID from './selector-id';\nimport SelectorDR from './selector-DR';\nimport SelectorPY from './selector-PY';\n//\nimport CalcSDMSummary from './card-sdm';\nimport DrawSDMDiagram from './sdm-diagram';\nimport CalcLEVSummary from './card-lev';\nimport OptimalPlanting from './optimal-planting';\nimport ChartLEV from './card-lev_time_course';\n\n// ドロワーのサイズ\nconst drawerWidth = 540;\n\nfunction App(props) {\n  // \n  const { window } = props;\n  // \n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  // ドロワー開閉のハンドラ\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n  // 開閉ボタン動作\n  const ExpandMore = styled((props) => {\n    const { expand, ...other } = props;\n    return <IconButton {...other} />;\n  })(({ theme, expand }) => ({\n    transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  }));\n  // カード開閉トグルハンドラ\n  const [expanded1, setExpanded1] = useState(true);\n  const handleExpand1Click = () => {\n    setExpanded1(!expanded1);\n  };\n  const [expanded2, setExpanded2] = useState(false);\n  const handleExpand2Click = () => {\n    setExpanded2(!expanded2);\n  };\n  const [expanded3, setExpanded3] = useState(false);\n  const handleExpand3Click = () => {\n    setExpanded3(!expanded3);\n  };\n  const [expanded4, setExpanded4] = useState(false);\n  const handleExpand4Click = () => {\n    setExpanded4(!expanded4);\n  };\n\n  // store => ローカルデータ\n  const localID = useSelector(state => state.id);\n  const localSDM = useSelector(state => state.sdm);\n  const localDV = useSelector(state => state.dv);\n  const localHeight = useSelector(state => state.height);\n  const localPlanting = useSelector(state => state.planting);\n  const localOptP = useSelector(state => state.optPlanting);\n  const localOptV = useSelector(state => state.optVolume);\n  const localLEV = useSelector(state => state.lev);\n  const localPriceS = useSelector(state => state.priceSapling);\n  const localCostM = useSelector(state => state.costManagement);\n  const localMAI = useSelector(state => state.mai)\n\n  //ドロワーの内容。 hook 利用のため、別モジュール化はできないみたい\n  const drawer = (\n    <div>\n      <Toolbar />\n      <Divider />\n      {SelectorSp()} {SelectorID()}\n      <Divider sx={{ mb: { xs: 2 }, }} />\n      <Box sx={{ p: { xs: 1 }, px: { xs: 3 }, }}> {SliderHeight()} </Box>\n      <Box sx={{ p: { xs: 1 }, px: { xs: 3 }, }}> {SliderPlanting()}  </Box>\n      <Divider sx={{ mb: { xs: 2 }, }} />\n      <Box sx={{ p: { xs: 1 }, px: { xs: 3 }, }}> {SliderRevenue()} </Box>\n      <Box sx={{ p: { xs: 1 }, px: { xs: 3 }, }}> {SliderPriceSapling()} </Box>\n      <Box sx={{ p: { xs: 1 }, px: { xs: 3 }, }}> {SliderCostManagement()} </Box>\n      <Box sx={{ p: { xs: 1 }, px: { xs: 3 }, }}> {SliderMAI()} </Box>\n      <List>\n        <ListItem sx={{ mx: \"auto\", width: drawerWidth * 0.9, }}> {SelectorDR()} {SelectorPY()} </ListItem>\n      </List>\n    </div>\n  )\n\n  // ウィンドウサイズ判定スイッチ\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  // 出力本体\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        sx={{\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\n          ml: { sm: `${drawerWidth}px` },\n        }}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            sx={{ mr: 2, display: { sm: 'none' } }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            LEV on Stand Density Management\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {/* ドロワー */}\n      <Box\n        component=\"nav\"\n        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\n        aria-label=\"mailbox folders\"\n      >\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        {/* 折り畳みドロワー（小画面用） */}\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }}\n        >\n          {drawer}\n        </Drawer>\n\n        {/* 表示ドロワー（大画面用） */}\n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            display: { xs: 'none', sm: 'block' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }}\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Box>\n\n      {/* メイン画面 */}\n      {localID !== \"\" ? (\n        <Card\n          id='Result-Card'\n          sx={{\n            elevation: 2,        // 表現としてのカードの配置（＝陰の大きさ）\n            width: { sm: `calc(100% - ${drawerWidth}px)` },\n            p: 6,\n            minWidth: 380,       // 最小カード幅（これ以上は小さくならない\n            // position: 'fixed',     // 表示位置固定\n            // top: '30px',           // 固定された表示位置のウィンドウ上部からの高さ\n            // right: '150px',        // 固定された表示位置のウィンドウ右端からの距離\n            zIndex: 2,           // 仮想上のカード配置（メニューよりうえに表示）\n          }}\n        >\n          {/* 密度管理図カード引き出し*/}\n          <CardActions disableSpacing sx={{ fontWeight: 'bold',  fontSize: 24, }}>\n            ［密度管理図］\n            <ExpandMore\n              expand={expanded1}\n              onClick={handleExpand1Click}\n              aria-expanded={expanded1}\n              aria-label=\"show more\"\n            >\n              < ExpandMoreIcon />\n            </ExpandMore>\n          </CardActions>\n          <Collapse in={expanded1} timeout=\"auto\" unmountOnExit>\n            <CardContent\n              sx = {{\n                p: 1,\n                m: 0,\n              }}\n            >\n              {DrawSDMDiagram(localID, localPlanting, localDV)}\n              {CalcSDMSummary(localSDM, localHeight, localPlanting)}\n            </CardContent>\n          </Collapse>\n          <Divider sx={{ mb: { xs: 2 }, }} />\n\n          {/* 最適植栽密度グラフカード引き出し*/}\n          <CardActions disableSpacing sx={{ fontWeight: 'bold', fontSize: 24, }}>\n            ［最適植栽本数］\n            <ExpandMore\n              expand={expanded2}\n              onClick={handleExpand2Click}\n              aria-expanded={expanded2}\n              aria-label=\"show more\"\n            >\n              < ExpandMoreIcon />\n            </ExpandMore>\n          </CardActions>\n          <Collapse in={expanded2} timeout=\"auto\" unmountOnExit>\n            <CardContent\n              sx = {{\n                p: 1,\n                m: 1,\n              }}\n            >\n              {OptimalPlanting(localSDM, localLEV, localHeight, localPriceS, localCostM, localOptP, localOptV)}\n            </CardContent>\n          </Collapse>\n          <Divider sx={{ mb: { xs: 2 }, }} />\n\n          {/* LEV結果カード引き出し*/}\n          <CardActions disableSpacing sx={{ fontWeight: 'bold', fontSize: 24,  }}>\n            ［LEVに基づく収益判断］\n            <ExpandMore\n              expand={expanded3}\n              onClick={handleExpand3Click}\n              aria-expanded={expanded3}\n              aria-label=\"show more\"\n            >\n              < ExpandMoreIcon />\n            </ExpandMore>\n          </CardActions>\n          <Collapse in={expanded3} timeout=\"auto\" unmountOnExit>\n            <CardContent>\n              {CalcLEVSummary(localSDM, localLEV, localOptP, localOptV, localMAI, localPriceS, localCostM)}\n            </CardContent>\n          </Collapse>\n          <Divider sx={{ mb: { xs: 2 }, }} />\n\n          {/* LEV結果カード引き出し*/}\n          <CardActions disableSpacing sx={{ fontWeight: 'bold', fontSize: 24, }}>\n            ［LEVチャート］\n            <ExpandMore\n              expand={expanded4}\n              onClick={handleExpand4Click}\n              aria-expanded={expanded4}\n              aria-label=\"show more\"\n            >\n              < ExpandMoreIcon />\n            </ExpandMore>\n          </CardActions>\n          <Collapse in={expanded4} timeout=\"auto\" unmountOnExit>\n            <CardContent>\n              {ChartLEV(localLEV, localMAI, localOptV)}\n            </CardContent>\n          </Collapse>\n          <Divider sx={{ mb: { xs: 2 }, }} />\n        </Card>\n      )\n        : \"\"}\n    </Box>\n  );\n}\n\nApp.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* \r\n  Land Expectation Value 推定用のクラス\r\n\r\n*/\r\nimport brentsMethod from 'brents-method';\r\n\r\nclass LEV{\r\n  // 初期値\r\n  constructor(rPN, cM, cS, pY, dR){\r\n    this.revenueProductionNet = rPN ?? 3500;  // 材販売純益（販売コストは先に減じておく）\r\n    this.costManagement = cM ?? 2e6;           // 育林コスト\r\n    this.costSapling = cS ?? 100*2500;        // 苗木コスト\r\n    this.processYield = pY ?? 0.8;            // 歩留まり\r\n    this.discountingRate = dR ?? 1;           // 値引率（実質金利）%で\r\n  };\r\n\r\n  //パラメータ設定\r\n  setParms (rPN, cM, cS, pY, dR){\r\n    this.revenueProductionNet = rPN;\r\n    this.costManagement = cM;\r\n    this.costSapling = cS;\r\n    this.processYield = pY;\r\n    this.discountingRate = dR;\r\n  };\r\n\r\n  // Expectation Value の計算\r\n  fc (volume){\r\n    return(\r\n      volume*this.processYield*this.revenueProductionNet\r\n    );\r\n  };\r\n\r\n  // NPV 計算\r\n  npv (volume, year) {\r\n    return(\r\n      this.fc(volume)/(1+this.discountingRate/100)**year - (this.costManagement + this.costSapling)\r\n    );\r\n  };\r\n\r\n  // LEV 計算\r\n  lev (volume, year){\r\n    return(\r\n      this.npv(volume, year) / (1 - (1/(1 + this.discountingRate/100))**year) \r\n      );\r\n  };\r\n\r\n  // threshold 計算\r\n  threshold (volume) {\r\n    const resultY =  Math.log((this.costManagement + this.costSapling)/this.fc(volume))/(-Math.log(1+this.discountingRate/100));\r\n    return(resultY > 0  ? Math.floor(resultY) : NaN);\r\n  }\r\n\r\n  // irr 計算\r\n  irr (balance){\r\n    return brentsMethod(\r\n      r => balance.reduce((out, x) => {\r\n        return out[1] + x[1]/(1 + r)**x[0]\r\n      }),\r\n      0,\r\n      1,\r\n      { errorTolerance: 1e-5, maxIterations: 100 },\r\n    )\r\n  }\r\n\r\n  // LEV時間変化\r\n  // 設定されているパラメータで0-250年までのLEVを出力\r\n  levTimeCourse (mai){\r\n    const year = [...Array(200)].map((x, index) => (index + 1));\r\n    // 出力結果を転置したいので、テンポラルに out を挟む\r\n    const out = year.map ((y) => [y, (this.lev(mai*y, y) / 10000)]);\r\n    // 行列転置スクリプト\r\n    // 一行めのデータのみ使って、一つめの map で列番号を抽出し、二つめのmapで元の配列の特定列データのみを出力\r\n    return out[0].map((_, c) => out.map(r => r[c]));\r\n  } \r\n\r\n};\r\n\r\nexport default LEV;","//\r\n// stage-2 の Reducer セット\r\n//\r\nimport SDMDiagram from './sdm-core';\r\nimport LEV from './lev-core';\r\n\r\n// store の初期値設定\r\nconst initialState = {\r\n  sp: '',                      // 樹種\r\n  id: '',                      // 密度管理図パラメータ参照ID\r\n  sdm: new SDMDiagram(0),       // 密度管理オブジェクト\r\n  height: 10,                 // 樹高 （m）\r\n  planting: 2500,             // 植栽苗木本数 （本／ha）\r\n  dv: '',                   // 材積・密度出力値（m3／ha, 本／ha）\r\n  optPlanting: [null],\r\n  optVolume: [null],\r\n  revenue: 4000,         // 伐出純益 （円／m3／ha）\r\n  priceSapling: 100,     // 苗木コスト （円／本）\r\n  costManagement: 200,   // 造・育林コスト （百万円／ha）\r\n  lev: [null],\r\n  mai: 10.0,             // 平均年成長量 （m3／ha／年）\r\n  discountingRate: 1.0,  // 割引率（実質金利） （ % ）\r\n  processYield: 0.8      // 丸太製材歩留\r\n}\r\n// Reducer\r\nconst stageTwo = (state = initialState, action) =>{\r\n  //Reducer 本体\r\n  switch (action.type) {\r\n    // 密度管理図パラメータID設定\r\n    case 'SET_SP':{\r\n      return {\r\n        ...state,\r\n        sp: action.payload,\r\n      };\r\n    } \r\n    // 密度管理図パラメータID設定\r\n    case 'SET_ID':{\r\n      return {\r\n        ...state,\r\n        id: action.payload,\r\n        sdm: new SDMDiagram(action.payload),\r\n        dv: state.sdm.PH2DV2(state.height, state.planting),\r\n        optPlanting:  Math.floor(state.sdm.OptimalPlanting(state.height, state.revenue * state.processYield, state.priceSapling, state.costManagement * 1e4)),\r\n        optVolume: state.sdm.PH2DV2(state.height, state.optPlanting).volume,\r\n        lev: new LEV(state.revenue, state.costManagement * 1e4, state.optPlanting * state.priceSapling, state.processYield, state.discountingRate),\r\n      };\r\n    } \r\n    // 樹高設定\r\n    case 'SET_HEIGHT':{\r\n      return {\r\n        ...state,\r\n        height: action.payload,\r\n        dv: state.sdm == null ? null : state.sdm.PH2DV2(action.payload, state.planting),\r\n        optPlanting: state.sdm == null ? null : Math.floor(state.sdm.OptimalPlanting(action.payload, state.revenue * state.processYield, state.priceSapling, state.costManagement * 1e4)),\r\n        optVolume: state.sdm == null ? null : state.sdm.PH2DV2(action.payload, state.optPlanting).volume,\r\n        lev: new LEV(state.revenue, state.costManagement * 1e4, state.optPlanting * state.priceSapling, state.processYield, state.discountingRate),\r\n      };\r\n    }\r\n    // 植栽本数設定\r\n    case 'SET_PLANTING':{\r\n      return {\r\n        ...state,\r\n        planting: action.payload,\r\n        dv: state.sdm == null ? null : state.sdm.PH2DV2(state.height, action.payload),\r\n      };\r\n    }\r\n    // 密度・材積セット更新\r\n    case 'SET_DV':{\r\n      return {\r\n        ...state,\r\n        dv: state.sdm == null ? null : state.sdm.PH2DV2(state.height, state.planting),\r\n      };\r\n    }\r\n    // 伐出純益設定\r\n    case 'SET_REVENUE':{\r\n      return {\r\n        ...state,\r\n        revenue: action.payload,\r\n        optPlanting:  Math.floor(state.sdm.OptimalPlanting(state.height, action.payload * state.processYield, state.priceSapling, state.costManagement * 1e4)),\r\n        optVolume: state.sdm.PH2DV2(state.height, state.optPlanting).volume,\r\n        lev: new LEV(action.payload, state.costManagement * 1e4, state.optPlanting * state.priceSapling, state.processYield, state.discountingRate),\r\n      };\r\n    }\r\n    // 苗木コスト設定\r\n    case 'SET_SAPLING_PRISE':{\r\n      return {\r\n        ...state,\r\n        priceSapling: action.payload,\r\n        optPlanting:  Math.floor(state.sdm.OptimalPlanting(state.height, state.revenue * state.processYield, action.payload, state.costManagement * 1e4)),\r\n        optVolume: state.sdm.PH2DV2(state.height, state.optPlanting).volume,\r\n        lev: new LEV(state.revenue, state.costManagement * 1e4, state.optPlanting * action.payload, state.processYield, state.discountingRate),\r\n      };\r\n    }\r\n    // 造・育林コスト設定\r\n    case 'SET_MANAGEMENT_COST':{\r\n      return {\r\n        ...state,\r\n        costManagement: action.payload,\r\n        optPlanting:  Math.floor(state.sdm.OptimalPlanting(state.height, state.revenue * state.processYield, state.priceSapling, action.payload * 1e4)),\r\n        optVolume: state.sdm.PH2DV2(state.height, state.optPlanting).volume,\r\n        lev: new LEV(state.revenue, action.payload * 1e4, state.optPlanting * state.priceSapling, state.processYield, state.discountingRate),\r\n      };\r\n    }\r\n    // MAI設定\r\n    case 'SET_MAI':{\r\n      return {\r\n        ...state,\r\n        mai: action.payload,\r\n      };\r\n    }\r\n    // 割引率設定\r\n    case 'SET_DISCOUNTING_RATE':{\r\n      return {\r\n        ...state,\r\n        discountingRate: action.payload,\r\n        optPlanting:  Math.floor(state.sdm.OptimalPlanting(state.height, state.revenue * state.processYield, state.priceSapling, state.costManagement * 1e4)),\r\n        optVolume: state.sdm.PH2DV2(state.height, state.optPlanting).volume,\r\n        lev: new LEV(state.revenue, state.costManagement * 1e4, state.optPlanting * state.priceSapling, state.processYield, action.payload),\r\n      };\r\n    }\r\n    // 丸太歩留設定\r\n    case 'SET_PROCESS_YIELD':{\r\n      return {\r\n        ...state,\r\n        processYield: action.payload,\r\n        lev: new LEV(state.revenue, state.costManagement * 1e4, state.optPlanting * state.priceSapling, action.payload, state.discountingRate),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// reducer ここまで\r\n\r\nexport default stageTwo;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//\nimport {createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport stageTwo from './reducer-LEVonSDM';\n\n// reducer 用にstoreを作る\nconst store = createStore(stageTwo,  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n<React.StrictMode>\n    <App />\n  </React.StrictMode>,\n</Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}